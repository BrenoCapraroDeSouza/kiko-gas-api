generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  RESALE
  CLIENT
}

enum SignalType {
  COLLECTION
  REPLENISHMENT
  REQUEST
}

enum PaymentType {
  PIX
  MONEY
}


type Address {
  id           String @db.ObjectId
  state        String
  city         String
  neighborhood String
  publicPlace  String
  number       String
  ie           String

  createdAt    DateTime @default(now())       
  updatedAt    DateTime @default(now())   
}

type ClientInfo {
  id        String
  name      String
  cpfcnpj   String
  phone     String
  address   String
  cylinder  CylinderInfo
}

type CylinderInfo {
  id          String
  name        String
  description String
  price       Float
  paymentType PaymentType?
  exchange    Float?
}

type ClientAddress {
  id           String @db.ObjectId
  name    String
  address String
  createdAt    DateTime @default(now())       
  updatedAt    DateTime @default(now())   
}

type GasCylinderRef {
  id          String @db.ObjectId
  name        String
  description String
  price       Float
}

model Signal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      SignalType
  client    ClientInfo
  createdAt DateTime @default(now())

  @@index([createdAt], name: "idx_createdAt")
}


model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  password String
  role     UserRole

  resale Resale? @relation("UserResale")
  client Client? @relation("UserClient")
}

model Resale {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  address Address
  phone   String
  cnpj    String

  user   User   @relation("UserResale", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String @unique @db.ObjectId

  clients Client[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  addresses ClientAddress[]
  phone     String
  cpfcnpj   String

  user   User   @relation("UserClient", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String @unique @db.ObjectId

  resale   Resale? @relation(fields: [resaleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resaleId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerGasCylinder CustomerGasCylinder?
}

model GasCylinder {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  tare        Float
  weight      Float
  resaleId    String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerGasCylinder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clientId String @unique @db.ObjectId
  client   Client @relation(fields: [clientId], references: [id])

  gasCylinders GasCylinderRef[]
}